{"version":3,"sources":["views/components/Cell.js","views/Maze.js","views/CreateMaze.js","views/Home.js","views/About.js","views/Portoflio.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHover","event","console","log","x","y","value","handleClick","bind","assertThisInitialized","activate","stateClass","trueClass","active","cellClasses","concat","react_default","a","createElement","className","onClick","onMouseOver","index","React","Component","uniqueId","require","Maze","state","maze","solved","mazeAsObject","Array","length","fill","map","row","rowIndex","cell","colIndex","id","bestPath","initSolve","checkNeighbours","getNeighbours","pathArray","_this2","JSON","parse","stringify","start","paths","visited","forEach","push","setState","path","neighbours","currentIndex","_this3","validMoves","potentialMove","indexOf","finish","filter","validMove","newPath","width","style","parsedBestPath","columnIndex","isActive","components_Cell","key","CreateMaze","handleChange","handleSubmit","createEmptyMaze","submitMaze","validateInput","submit","flowIteration","flow","text","emptyMaze","cellIsOnTheEdge","dummyMaze","_maze","cells","i","j","element","Number","target","views_Maze","type","onChange","Home","views_CreateMaze","About","Portfolio","App","react_router_dom","react_router","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25069d1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Cell extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.x = this.props.x;\r\n    this.y = this.props.y;\r\n    this.value = this.props.value;\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    if (this.props.activate) {\r\n      this.props.activate(this.x, this.y);\r\n    }\r\n  }\r\n\r\n  handleHover = (event) => {\r\n    console.log(event);\r\n  };\r\n\r\n  render() {\r\n    let baseClass = \"cell\";\r\n    let stateClass = this.value == 0 ? \"wall\" : \"path\";\r\n    let trueClass = this.props.active ? \"true\" : \"\";\r\n    let cellClasses = `${baseClass} ${stateClass} ${trueClass}`;\r\n    return (\r\n      <div\r\n        className={cellClasses}\r\n        onClick={this.handleClick}\r\n        onMouseOver={this.handleHover}\r\n      >\r\n        <h1>{this.props.index}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"./components/Cell\";\r\nlet uniqueId = require(\"lodash.uniqueid\");\r\n\r\nclass Maze extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      maze: this.props.maze || [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 3],\r\n        [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\r\n        [2, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n      ],\r\n      solved: false,\r\n\r\n      mazeAsObject: Array(this.props.maze[0].length)\r\n        .fill(null)\r\n        .map((row, rowIndex) => {\r\n          return Array(this.props.maze[0].length)\r\n            .fill(null)\r\n            .map((cell, colIndex) => {\r\n              const cell_object = {\r\n                x: colIndex,\r\n                y: rowIndex,\r\n                state: this.props.maze[rowIndex][colIndex],\r\n                id: uniqueId()\r\n              };\r\n              cell = cell_object;\r\n              return cell;\r\n            });\r\n        })\r\n    };\r\n\r\n    this.bestPath = [];\r\n    this.initSolve = this.initSolve.bind(this);\r\n    this.checkNeighbours = this.checkNeighbours.bind(this);\r\n    this.getNeighbours = this.getNeighbours.bind(this);\r\n    this.pathArray = [];\r\n  }\r\n\r\n  initSolve() {\r\n    let maze = JSON.parse(JSON.stringify(this.state.mazeAsObject));\r\n    let start = null;\r\n    let paths = [];\r\n    let visited = [];\r\n    maze.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        // Is start?\r\n        if ((start === null) & (cell.state == 2)) {\r\n          start = cell;\r\n          paths.push(cell);\r\n          visited.push(cell.id);\r\n        }\r\n      });\r\n    });\r\n    this.checkNeighbours(\r\n      this.getNeighbours(start.x, start.y),\r\n      paths,\r\n      visited,\r\n      0\r\n    );\r\n    const solved = true;\r\n    this.setState({\r\n      solved\r\n    });\r\n    console.log(\"Result\", this.pathArray);\r\n    // Get path that ends with exit\r\n    this.pathArray.forEach((path) => {\r\n      if (path[path.length - 1].state == 3) {\r\n        this.bestPath = path;\r\n      }\r\n    });\r\n  }\r\n\r\n  getNeighbours(x, y) {\r\n    let maze = this.state.mazeAsObject;\r\n    let neighbours = [];\r\n    maze.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (\r\n          (cell.x == x && cell.y == y + 1) ||\r\n          (cell.x == x && cell.y == y - 1) ||\r\n          (cell.y == y && cell.x == x + 1) ||\r\n          (cell.y == y && cell.x == x - 1)\r\n        ) {\r\n          neighbours.push(cell);\r\n        }\r\n      });\r\n    });\r\n\r\n    return neighbours;\r\n  }\r\n\r\n  checkNeighbours(neighbours, path, visited, currentIndex) {\r\n    let validMoves = [];\r\n    neighbours.forEach((potentialMove) => {\r\n      if (visited.indexOf(potentialMove.id) < 0) {\r\n        if (potentialMove.state !== 0) {\r\n          validMoves.push(potentialMove);\r\n        }\r\n      }\r\n    });\r\n    if (validMoves.length === 0) {\r\n      this.pathArray[currentIndex] = path;\r\n      return;\r\n    } else {\r\n      let finish = validMoves.filter((cell) => cell.state === 3);\r\n      if (finish.length === 1) {\r\n        path.push(finish[0]);\r\n        this.pathArray[currentIndex] = path;\r\n        return;\r\n      }\r\n    }\r\n    validMoves.forEach((validMove) => {\r\n      let newPath = JSON.parse(JSON.stringify(path));\r\n      currentIndex++;\r\n      newPath.push(validMove);\r\n      visited.push(validMove.id);\r\n      this.checkNeighbours(\r\n        this.getNeighbours(validMove.x, validMove.y),\r\n        newPath,\r\n        visited,\r\n        currentIndex\r\n      );\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initSolve();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.solved) {\r\n      let width = this.props.width\r\n        ? this.props.width\r\n        : this.state.maze[0].length * 100;\r\n      let style = {\r\n        width: `${width}px`\r\n      };\r\n      let parsedBestPath = this.bestPath.map((cell) => cell.id);\r\n      if (this.state.mazeAsObject) {\r\n        let maze = this.state.mazeAsObject.map((row, columnIndex) => {\r\n          return row.map((cell, rowIndex) => {\r\n            const isActive = parsedBestPath.indexOf(cell.id) < 0 ? false : true;\r\n            return (\r\n              <Cell\r\n                key={uniqueId()}\r\n                index={cell.id}\r\n                active={isActive}\r\n                value={cell.state}\r\n                x={rowIndex}\r\n                y={columnIndex}\r\n              />\r\n            );\r\n          });\r\n        });\r\n        return (\r\n          <div style={style} className=\"maze\">\r\n            {maze}\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Maze;\r\n","import React from \"react\";\r\nimport Cell from \"./components/Cell\";\r\nimport Maze from \"./Maze\";\r\nlet uniqueId = require(\"lodash.uniqueid\");\r\n\r\nclass CreateMaze extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.createEmptyMaze = this.createEmptyMaze.bind(this);\r\n    this.submitMaze = this.submitMaze.bind(this);\r\n    this.getNeighbours = this.getNeighbours.bind(this);\r\n    this.validateInput = this.validateInput.bind(this);\r\n    this.activate = this.activate.bind(this);\r\n    this.state = {\r\n      value: 0,\r\n      submit: false,\r\n      maze: []\r\n    };\r\n    this.flowIteration = 0;\r\n    this.flow = [\r\n      {\r\n        text: \"Choose a start\",\r\n        state: 2\r\n      },\r\n      {\r\n        text: \"Create an end\",\r\n        state: 3\r\n      },\r\n      {\r\n        text: \"Choose a path\",\r\n        state: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  submitMaze() {\r\n    const submit = \"showSolution\";\r\n    const maze = this.state.maze;\r\n\r\n    this.setState({\r\n      submit,\r\n      maze\r\n    });\r\n  }\r\n\r\n  activate(x, y) {\r\n    const maze = this.state.maze;\r\n    let emptyMaze = this.createEmptyMaze();\r\n    let cellIsOnTheEdge = this.validateInput(x, y, emptyMaze) !== 4;\r\n\r\n    if (this.flowIteration == 0) {\r\n      debugger;\r\n      if (cellIsOnTheEdge) {\r\n        maze[y][x] = 2;\r\n        this.setState({ maze });\r\n        this.flowIteration++;\r\n        return;\r\n      }\r\n    } else if (this.flowIteration == 1) {\r\n      debugger;\r\n      if (cellIsOnTheEdge) {\r\n        maze[y][x] = 3;\r\n        this.setState({ maze });\r\n        this.flowIteration++;\r\n        return;\r\n      }\r\n    } else {\r\n      maze[y][x] = maze[y][x] == 1 ? 0 : 1;\r\n    }\r\n    this.setState({ maze });\r\n  }\r\n\r\n  validateInput(x, y) {\r\n    let dummyMaze = Array(this.state.value)\r\n      .fill(null)\r\n      .map((row, rowIndex) => {\r\n        return Array(this.state.value)\r\n          .fill(null)\r\n          .map((cell, colIndex) => {\r\n            return {\r\n              x: colIndex,\r\n              y: rowIndex\r\n            };\r\n          });\r\n      });\r\n    debugger;\r\n    const neighbours = this.getNeighbours(x, y, dummyMaze);\r\n    return neighbours.length;\r\n  }\r\n\r\n  getNeighbours(x, y, _maze) {\r\n    let maze = _maze;\r\n    let neighbours = [];\r\n    maze.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (\r\n          (cell.x == x && cell.y == y + 1) ||\r\n          (cell.x == x && cell.y == y - 1) ||\r\n          (cell.y == y && cell.x == x + 1) ||\r\n          (cell.y == y && cell.x == x - 1)\r\n        ) {\r\n          neighbours.push(cell);\r\n        }\r\n      });\r\n    });\r\n\r\n    return neighbours;\r\n  }\r\n\r\n  createEmptyMaze() {\r\n    let cells = [];\r\n    for (let i = 0; i < this.state.value; i++) {\r\n      for (let j = 0; j < this.state.value; j++) {\r\n        const element = (\r\n          <Cell\r\n            key={uniqueId()}\r\n            activate={this.activate}\r\n            index={\"\"}\r\n            active={false}\r\n            value={this.state.maze[i][j]}\r\n            x={j}\r\n            y={i}\r\n          />\r\n        );\r\n        cells.push(element);\r\n      }\r\n    }\r\n    return cells;\r\n  }\r\n\r\n  handleChange(event) {\r\n    const value = Number(event.target.value);\r\n    this.setState({ value });\r\n  }\r\n  handleSubmit(event) {\r\n    const maze = Array(this.state.value)\r\n      .fill(null)\r\n      .map((row) => {\r\n        return Array(this.state.value)\r\n          .fill(null)\r\n          .map((cell) => 0);\r\n      });\r\n    const submit = \"inputMaze\";\r\n    this.setState({ submit, maze });\r\n  }\r\n  render() {\r\n    switch (this.state.submit) {\r\n      case \"showSolution\":\r\n        return (\r\n          <div>\r\n            <Maze maze={this.state.maze} width={this.state.value * 50} />\r\n          </div>\r\n        );\r\n      case \"inputMaze\":\r\n        const style = { width: `${this.state.value * 50}px` };\r\n        let cells = this.createEmptyMaze();\r\n        return (\r\n          <div>\r\n            <h2>{this.flow[this.flowIteration].text}</h2>\r\n            <input onClick={this.submitMaze} type=\"submit\" value=\"Submit\" />\r\n            <div style={style} className=\"maze\">\r\n              {cells}\r\n            </div>\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div>\r\n            <h1>Create Maze</h1>\r\n            <p>Create the maze</p>\r\n            <div className=\"c-form\">\r\n              <label>\r\n                Enter grid size (n x n):\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <input onClick={this.handleSubmit} type=\"submit\" value=\"Submit\" />\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default CreateMaze;\r\n","import React from \"react\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport CreateMaze from \"./CreateMaze\";\r\nclass Home extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CreateMaze />\r\n        {/* <h1> Home </h1>{\" \"}\r\n        <h2>\r\n          <Link to=\"/about\"> About </Link>{\" \"}\r\n        </h2>{\" \"}\r\n        <h2>\r\n          <Link to=\"/portfolio\"> Portfolio </Link>{\" \"}\r\n        </h2>{\" \"}\r\n        <h2>\r\n          <Link to=\"/maze\"> Maze </Link>{\" \"}\r\n        </h2>{\" \"}\r\n        <h2>\r\n          <Link to=\"/create\"> Create </Link>{\" \"}\r\n        </h2>{\" \"} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>About</h1>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nclass Portfolio extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Portfolio</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Home from \"./views/Home\";\r\nimport About from \"./views/About\";\r\nimport Portfolio from \"./views/Portoflio\";\r\nimport Maze from \"./views/Maze\";\r\nimport CreateMaze from \"./views/CreateMaze\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\" component={Home} />{\" \"}\r\n        <Route path=\"/about\" component={About} />{\" \"}\r\n        <Route path=\"/portfolio\" component={Portfolio} />{\" \"}\r\n        <Route path=\"/maze\" component={Maze} />{\" \"}\r\n        <Route path=\"/create\" component={CreateMaze} />{\" \"}\r\n      </div>{\" \"}\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}